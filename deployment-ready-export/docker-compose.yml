services:
  frontend:
    build:
      context: ./frontend
      target: production
    ports:
      - "80:3000" # Map port 80 for production
    environment:
      - NODE_ENV=production
      - VITE_API_URL=http://goatmorpho.info/api
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - goat_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  backend:
    build:
      context: ./backend
      target: production
    ports:
      - "8000:8000"
    environment:
      - DJANGO_SETTINGS_MODULE=goat_measure.settings
      - DEBUG=0
      - SECRET_KEY=${SECRET_KEY:-default_secret_key}
      - DATABASE_URL=postgresql://goatuser:${POSTGRES_PASSWORD:-goatpass123}@db:5432/goatmeasure
      - REDIS_URL=redis://redis:6379/0
      - ALLOWED_HOSTS=goatmorpho.info,localhost,127.0.0.1
      - CORS_ORIGIN_WHITELIST=http://goatmorpho.info,https://goatmorpho.info
    volumes:
      - static_files:/app/staticfiles
      - media_files:/app/media
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    restart: unless-stopped
    networks:
      - goat_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 3

  db:
    image: postgres:16-alpine
    environment:
      - POSTGRES_DB=goatmeasure
      - POSTGRES_USER=goatuser
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-goatpass123}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U goatuser -d goatmeasure"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - goat_network

  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - goat_network

  nginx:
    image: nginx:alpine
    ports:
      - "443:443" # HTTPS
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - static_files:/var/www/static
      - media_files:/var/www/media
      - ./certbot/conf:/etc/letsencrypt:ro
      - ./certbot/www:/var/www/certbot:ro
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    networks:
      - goat_network

  certbot:
    image: certbot/certbot
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  static_files:
    driver: local
  media_files:
    driver: local

networks:
  goat_network:
    driver: bridge
